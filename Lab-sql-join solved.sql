USE sakila;

-- List the Number of Films per Category

SELECT 
    c.name AS category_name, 
    COUNT(f.film_id) AS number_of_films
FROM 
    film f
JOIN 
    film_category fc ON f.film_id = fc.film_id
JOIN 
    category c ON fc.category_id = c.category_id
GROUP BY 
    c.name;
    
-- Retrieve the Store ID, City, and Country for Each Store

SELECT 
    s.store_id, 
    ci.city, 
    co.country
FROM 
    store s
JOIN 
    address a ON s.address_id = a.address_id
JOIN 
    city ci ON a.city_id = ci.city_id
JOIN 
    country co ON ci.country_id = co.country_id;

-- Calculate the Total Revenue Generated by Each Store in Dollars
SELECT 
    s.store_id, 
    SUM(p.amount) AS total_revenue
FROM 
    payment p
JOIN 
    rental r ON p.rental_id = r.rental_id
JOIN 
    inventory i ON r.inventory_id = i.inventory_id
JOIN 
    store s ON i.store_id = s.store_id
GROUP BY 
    s.store_id;
    
-- Determine the Average Running Time of Films for Each Category
SELECT 
    c.name AS category_name, 
    ROUND(AVG(f.length), 2) AS avg_running_time
FROM 
    film f
JOIN 
    film_category fc ON f.film_id = fc.film_id
JOIN 
    category c ON fc.category_id = c.category_id
GROUP BY 
    c.name;
    
-- Identify the Film Categories with the Longest Average Running Time (Bonus)
SELECT 
    c.name AS category_name, 
    ROUND(AVG(f.length), 2) AS avg_running_time
FROM 
    film f
JOIN 
    film_category fc ON f.film_id = fc.film_id
JOIN 
    category c ON fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY 
    avg_running_time DESC
LIMIT 1;

-- Display the Top 10 Most Frequently Rented Movies in Descending Order (Bonus)
SELECT 
    f.title, 
    COUNT(r.rental_id) AS rental_count
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id
JOIN 
    rental r ON i.inventory_id = r.inventory_id
GROUP BY 
    f.film_id, f.title
ORDER BY 
    rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" Can Be Rented from Store 1 (Bonus)
SELECT 
    f.title, 
    CASE 
        WHEN i.inventory_id IS NOT NULL THEN 'Available'
        ELSE 'Not Available'
    END AS availability
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id AND i.store_id = 1
WHERE 
    f.title = 'Academy Dinosaur';
    
-- Provide a List of All Distinct Film Titles and Their Availability Status (Bonus)
SELECT 
    f.title, 
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'NOT Available'
        ELSE 'Available'
    END AS availability_status
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id
GROUP BY 
    f.film_id, f.title;

